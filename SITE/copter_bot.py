import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–± —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
ELECTRICAL_PARTS = {
    "üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä (LiPo)": {
        "description": (
            "–ò—Å—Ç–æ—á–Ω–∏–∫ –ø–∏—Ç–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 4S 1500mAh).\n\n"
            "üìå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            "- –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ: 14.8V\n"
            "- –ï–º–∫–æ—Å—Ç—å: 1500-2200mAh\n"
            "- –†–∞–∑—ä–µ–º: XT60\n\n"
            "‚ö†Ô∏è –ù–µ –¥–æ–ø—É—Å–∫–∞–π—Ç–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–∑—Ä—è–¥–∞!"
        ),
        "image": "https://i.ibb.co/4g1Q8NtD/image.jpg"
    },
    "üß† –ü–æ–ª–µ—Ç–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä": {
        "description": (
            "–û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, Betaflight F7).\n\n"
            "üìå –§—É–Ω–∫—Ü–∏–∏:\n"
            "- –°—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª–µ—Ç–∞\n"
            "- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ —Å –ø—É–ª—å—Ç–∞\n"
            "- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ESC\n\n"
            "üí° –ü—Ä–æ—à–∏–≤–∫–∏: Betaflight, iNav, ArduPilot"
        ),
        "image": "https://i.ibb.co/rffz1tmH/image.jpg"
    },
      "–†–µ–≥—É–ª—è—Ç–æ—Ä—ã (ESC)": {  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        "description": (
            "4 ESC (–Ω–∞–ø—Ä–∏–º–µ—Ä, BLHeli_32 35A).\n\n"
            "–ó–∞–¥–∞—á–∏:\n"
            "- –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–æ—Ç–æ—Ä–æ–≤\n"
            "- –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–µ—Ä–µ–≥—Ä—É–∑–æ–∫\n"
            "- –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ —Ç–æ–∫—É\n\n"
            "–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞!"
        ),
        "image": "https://i.ibb.co/39JRmVd6/image.jpg"
    },
    "üì° –ü—Ä–∏–µ–º–Ω–∏–∫ (RX)": {
        "description": (
            "–ü–æ–ª—É—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã —Å –ø—É–ª—å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, TBS Crossfire).\n\n"
            "üìå –ü—Ä–æ—Ç–æ–∫–æ–ª—ã:\n"
            "- SBUS\n"
            "- CRSF\n"
            "- PWM\n\n"
            "üì∂ –î–∞–ª—å–Ω–æ—Å—Ç—å: –¥–æ 10+ –∫–º"
        ),
        "image": "https://i.ibb.co/fGtDMyPv/image.jpg"
    },
    "üì∑ –ö–∞–º–µ—Ä–∞ FPV": {
        "description": (
            "–ê–Ω–∞–ª–æ–≥–æ–≤–∞—è/—Ü–∏—Ñ—Ä–æ–≤–∞—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, RunCam Phoenix 2).\n\n"
            "üìå –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
            "- –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: 1200TVL\n"
            "- –£–≥–æ–ª –æ–±–∑–æ—Ä–∞: 170¬∞\n"
            "- –§–æ—Ä–º–∞—Ç: 4:3/16:9\n\n"
            "üåô –ù–æ—á–Ω–∞—è —Å—ä–µ–º–∫–∞: –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å–µ–Ω—Å–æ—Ä–∞"
        ),
        "image": "https://i.ibb.co/xtb9kZNP/image.webp"
    },
    "üì∂ VTX (–ü–µ—Ä–µ–¥–∞—Ç—á–∏–∫ –≤–∏–¥–µ–æ)": {
        "description": (
            "–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤–∏–¥–µ–æ —Å –∫–∞–º–µ—Ä—ã –Ω–∞ –æ—á–∫–∏/–º–æ–Ω–∏—Ç–æ—Ä.\n\n"
            "üìå –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:\n"
            "- –ú–æ—â–Ω–æ—Å—Ç—å: 25-800mW\n"
            "- –ö–∞–Ω–∞–ª—ã: 5.8GHz\n"
            "- –ê–Ω—Ç–µ–Ω–Ω–∞: MMCX/SMA\n\n"
            "‚öñÔ∏è –ó–∞–∫–æ–Ω–Ω–æ—Å—Ç—å: –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è"
        ),
        "image": "https://i.ibb.co/ymFBbL7J/vtx.jpg"
    },
    "üîÑ –ú–æ—Ç–æ—Ä—ã": {
        "description": (
            "4 –±–µ—Å–∫–æ–ª–ª–µ–∫—Ç–æ—Ä–Ω—ã—Ö –º–æ—Ç–æ—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2207 1750KV).\n\n"
            "üìå –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:\n"
            "- KV-—Ä–µ–π—Ç–∏–Ω–≥: 1500-2500\n"
            "- –ö—Ä–µ–ø–ª–µ–Ω–∏–µ: M3/M5\n"
            "- –¢–∏–ø: Inrunner/Outrunner\n\n"
            "‚öôÔ∏è –ü–æ–¥–±–∏—Ä–∞—é—Ç—Å—è –ø–æ–¥ –≤–µ—Å –∫–æ–ø—Ç–µ—Ä–∞"
        ),
        "image": "https://i.ibb.co/c4sL5cK/image.jpg"
    }
}

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /start - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await show_components_menu(update)

async def show_components_menu(update: Update):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    keyboard = [
        [InlineKeyboardButton(part, callback_data=part)]
        for part in ELECTRICAL_PARTS.keys()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    text = "üîå *–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∞—è —Å—Ö–µ–º–∞ –∫–≤–∞–¥—Ä–æ–∫–æ–ø—Ç–µ—Ä–∞*:\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç:"
    
    if update.callback_query:
        await update.callback_query.edit_message_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )
    else:
        await update.message.reply_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

async def show_part(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ"""
    query = update.callback_query
    await query.answer()
    
    part_name = query.data
    part_data = ELECTRICAL_PARTS.get(part_name, {})
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º", callback_data="back_to_components")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await query.edit_message_text(
        text=f"*{part_name}*\n\n{part_data['description']}\n\n[–§–æ—Ç–æ]({part_data['image']})",
        reply_markup=reply_markup,
        parse_mode="Markdown",
        disable_web_page_preview=False
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_components":
        await show_components_menu(update)
    elif query.data in ELECTRICAL_PARTS:
        await show_part(update, context)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    await update.message.reply_text(
        "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã\n"
        "/help - –°–ø—Ä–∞–≤–∫–∞",
        parse_mode="Markdown"
    )

def main() -> None:
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    application = Application.builder().token("8153324226:AAHQfP2euZhUautClAmPuSVctI5cwExByz4").build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CallbackQueryHandler(button_handler))
    
    application.run_polling()

if __name__ == "__main__":
    main()